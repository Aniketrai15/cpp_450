bool iscyclic(int node,unordered_map<int,bool> &visited, unordered_map<int,bool> &dfsvis,vector<int> adj[]){
      visited[node]=true;
      dfsvis[node]=true;
      for(auto neighbour:adj[node]){
          if(!visited[neighbour]){
              bool cyclic = iscyclic(neighbour,visited,dfsvis,adj);
              if(cyclic){
                  return true;
              }
          }
          else if(dfsvis[neighbour]){
              return true;
          }
      }
      
      dfsvis[node]=false;
      return false;
  }
  public:
    // Function to detect cycle in a directed graph.
    bool isCyclic(int V, vector<int> adj[]) {
        // code here
        unordered_map<int,bool> visited;
        unordered_map<int,bool> dfsvis;
        for(int i=0;i<V;i++){
            if(!visited[i]){
                bool ans  = iscyclic(i,visited,dfsvis,adj);
                if(ans){
                    return true;
                }
            }
        }
        return false;
    }