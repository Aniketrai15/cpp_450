bool iscyclic(int src,unordered_map<int,bool> &visited,vector<int> adj[]){
      unordered_map<int,int> parent;
      queue<int> q;
      visited[src]=true;
      q.push(src);
      parent[src]=-1;
      while(!q.empty()){
          int front  = q.front();
          q.pop();
          for(auto neighbour:adj[front]){
              if(visited[neighbour]==true and neighbour!=parent[front]){
                  return true;
              }
              else if(!visited[neighbour]){
                  q.push(neighbour);
                  visited[neighbour]=true;
                  parent[neighbour]=front;
              }
          }
      }
      
      return false;
  }
  public:
    // Function to detect cycle in an undirected graph.
    bool isCycle(int V, vector<int> adj[]) {
        // Code here
        unordered_map<int,bool> visited;
        for(int i=0;i<V;i++){
            if(!visited[i]){
                bool ans = iscyclic(i,visited,adj);
                if(ans){
                    return true;
                }
            }
        }
        
        
        return false;
    }