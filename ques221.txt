class Node{
    public:
    int data;
    Node* left;
    Node* right;
    
    Node(int d){
        data=d;
        left=NULL;
        right=NULL;
    }
};

class cmp{
    public:
    bool operator()(Node* a, Node* b){
        return a->data > b->data;
    }
};


class Solution
{
    private:
    void traverse(vector<string> &ans,string temp,Node* root){
        if(root->left==NULL and root->right==NULL){
            ans.push_back(temp);
            return;
        }
        
        traverse(ans,temp+'0',root->left);
        traverse(ans,temp+'1',root->right);
    }
	public:
		vector<string> huffmanCodes(string S,vector<int> f,int N)
		{
		    // Code here
		    priority_queue<Node*,vector<Node*>,cmp> pq;
		    for(int i=0;i<N;i++){
		        Node* temp = new Node(f[i]);
		        pq.push(temp);
		    }
		    
		    while(pq.size()>1){
		        Node* ele1 = pq.top();
		        pq.pop();
		        Node* ele2 = pq.top();
		        pq.pop();
	            Node* new_ele = new Node(ele1->data+ele2->data);
	            new_ele->left = ele1;
	            new_ele->right = ele2;
	            
	            pq.push(new_ele);
		      
		    }
		    
		    Node* root = pq.top();
		    vector<string> ans;
		    string temp="";
		    
		    traverse(ans,temp,root);
		    
		    return ans;
		}
};