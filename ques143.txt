private:
    Node* middle(Node* head){
        Node* slow=head;
        Node* fast=head->next;
        
        while(fast!=NULL and fast->next!=NULL){
            fast=fast->next;
            if(fast->next!=NULL){
                fast=fast->next;
            }
            slow=slow->next;
        }
        
        return slow;    
        
    }
    
    Node* reverse(Node* head){
        Node* curr=head;
        Node* prev=NULL;
        Node* nxt=NULL;
        
        while(curr!=NULL){
            nxt=curr->next;
            curr->next=prev;
            prev=curr;
            curr=nxt;
        }
        
        return prev;
    }
  
  public:
    //Function to check whether the list is palindrome.
    bool isPalindrome(Node *head)
    {
        //Your code here
        Node* mid=middle(head);
        
        Node* temp=mid->next;
        mid->next=reverse(temp);
        
        Node* head1=head;
        Node* head2=mid->next;
        
        while(head2!=NULL){
            if(head1->data!=head2->data){
                return false;
            }
            head1=head1->next;
            head2=head2->next;
            
        }
        temp=mid->next;
        mid->next=reverse(temp);
        return true;
    }