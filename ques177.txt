void leftTree(Node* root, vector<int> &ans){
    if(root==NULL) return;
    if(root->left==NULL && root->right==NULL) return;
    
    ans.push_back(root->data);
    if(root->left){
        leftTree(root->left,ans);
    }                                 //preorder
    else if(root->right){
        leftTree(root->right,ans);
    }
}

void leaf(Node* root,vector<int> &ans){
    if(root==NULL) return;
    
    if(root->left == NULL && root->right==NULL){
        ans.push_back(root->data);
        return;
    }
    
    leaf(root->left,ans);
    leaf(root->right,ans);

    
}

void revRight(Node* root,vector<int> &ans){
    if(root==NULL) return;
    if(root->left == NULL && root->right==NULL) return;     //postorder
    
    if(root->right){
        revRight(root->right,ans);
    }
    else if(root->left){
        revRight(root->left,ans);
    }
    
    ans.push_back(root->data);
}

class Solution {
public:
    vector <int> printBoundary(Node *root)
    {
        //Your code here
        vector<int> ans;
        ans.push_back(root->data);
        leftTree(root->left,ans);
        leaf(root,ans);
        revRight(root->right,ans);
        return ans;
    }
};